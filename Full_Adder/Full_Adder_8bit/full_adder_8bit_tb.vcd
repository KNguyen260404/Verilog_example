$date
	Mon Jun 23 14:40:31 2025
$end
$version
	Icarus Verilog
$end
$timescale
	1s
$end
$scope module full_adder_8bit_tb $end
$var wire 8 ! sum_signed [7:0] $end
$var wire 8 " sum [7:0] $end
$var wire 1 # overflow $end
$var wire 1 $ cout $end
$var reg 8 % a [7:0] $end
$var reg 8 & a_signed [7:0] $end
$var reg 8 ' b [7:0] $end
$var reg 8 ( b_signed [7:0] $end
$var reg 1 ) cin $end
$scope module uut $end
$var wire 8 * a [7:0] $end
$var wire 8 + b [7:0] $end
$var wire 1 ) cin $end
$var wire 1 # overflow $end
$var wire 8 , sum [7:0] $end
$var wire 1 $ cout $end
$var wire 9 - carry [8:0] $end
$scope begin full_adder_loop[0] $end
$var parameter 2 . i $end
$scope module fa $end
$var wire 1 / a $end
$var wire 1 0 b $end
$var wire 1 1 cin $end
$var wire 1 2 cout $end
$var wire 1 3 sum1 $end
$var wire 1 4 sum $end
$var wire 1 5 carry2 $end
$var wire 1 6 carry1 $end
$scope module ha1 $end
$var wire 1 / a $end
$var wire 1 0 b $end
$var wire 1 6 carry $end
$var wire 1 3 sum $end
$upscope $end
$scope module ha2 $end
$var wire 1 3 a $end
$var wire 1 1 b $end
$var wire 1 5 carry $end
$var wire 1 4 sum $end
$upscope $end
$upscope $end
$upscope $end
$scope begin full_adder_loop[1] $end
$var parameter 2 7 i $end
$scope module fa $end
$var wire 1 8 a $end
$var wire 1 9 b $end
$var wire 1 : cin $end
$var wire 1 ; cout $end
$var wire 1 < sum1 $end
$var wire 1 = sum $end
$var wire 1 > carry2 $end
$var wire 1 ? carry1 $end
$scope module ha1 $end
$var wire 1 8 a $end
$var wire 1 9 b $end
$var wire 1 ? carry $end
$var wire 1 < sum $end
$upscope $end
$scope module ha2 $end
$var wire 1 < a $end
$var wire 1 : b $end
$var wire 1 > carry $end
$var wire 1 = sum $end
$upscope $end
$upscope $end
$upscope $end
$scope begin full_adder_loop[2] $end
$var parameter 3 @ i $end
$scope module fa $end
$var wire 1 A a $end
$var wire 1 B b $end
$var wire 1 C cin $end
$var wire 1 D cout $end
$var wire 1 E sum1 $end
$var wire 1 F sum $end
$var wire 1 G carry2 $end
$var wire 1 H carry1 $end
$scope module ha1 $end
$var wire 1 A a $end
$var wire 1 B b $end
$var wire 1 H carry $end
$var wire 1 E sum $end
$upscope $end
$scope module ha2 $end
$var wire 1 E a $end
$var wire 1 C b $end
$var wire 1 G carry $end
$var wire 1 F sum $end
$upscope $end
$upscope $end
$upscope $end
$scope begin full_adder_loop[3] $end
$var parameter 3 I i $end
$scope module fa $end
$var wire 1 J a $end
$var wire 1 K b $end
$var wire 1 L cin $end
$var wire 1 M cout $end
$var wire 1 N sum1 $end
$var wire 1 O sum $end
$var wire 1 P carry2 $end
$var wire 1 Q carry1 $end
$scope module ha1 $end
$var wire 1 J a $end
$var wire 1 K b $end
$var wire 1 Q carry $end
$var wire 1 N sum $end
$upscope $end
$scope module ha2 $end
$var wire 1 N a $end
$var wire 1 L b $end
$var wire 1 P carry $end
$var wire 1 O sum $end
$upscope $end
$upscope $end
$upscope $end
$scope begin full_adder_loop[4] $end
$var parameter 4 R i $end
$scope module fa $end
$var wire 1 S a $end
$var wire 1 T b $end
$var wire 1 U cin $end
$var wire 1 V cout $end
$var wire 1 W sum1 $end
$var wire 1 X sum $end
$var wire 1 Y carry2 $end
$var wire 1 Z carry1 $end
$scope module ha1 $end
$var wire 1 S a $end
$var wire 1 T b $end
$var wire 1 Z carry $end
$var wire 1 W sum $end
$upscope $end
$scope module ha2 $end
$var wire 1 W a $end
$var wire 1 U b $end
$var wire 1 Y carry $end
$var wire 1 X sum $end
$upscope $end
$upscope $end
$upscope $end
$scope begin full_adder_loop[5] $end
$var parameter 4 [ i $end
$scope module fa $end
$var wire 1 \ a $end
$var wire 1 ] b $end
$var wire 1 ^ cin $end
$var wire 1 _ cout $end
$var wire 1 ` sum1 $end
$var wire 1 a sum $end
$var wire 1 b carry2 $end
$var wire 1 c carry1 $end
$scope module ha1 $end
$var wire 1 \ a $end
$var wire 1 ] b $end
$var wire 1 c carry $end
$var wire 1 ` sum $end
$upscope $end
$scope module ha2 $end
$var wire 1 ` a $end
$var wire 1 ^ b $end
$var wire 1 b carry $end
$var wire 1 a sum $end
$upscope $end
$upscope $end
$upscope $end
$scope begin full_adder_loop[6] $end
$var parameter 4 d i $end
$scope module fa $end
$var wire 1 e a $end
$var wire 1 f b $end
$var wire 1 g cin $end
$var wire 1 h cout $end
$var wire 1 i sum1 $end
$var wire 1 j sum $end
$var wire 1 k carry2 $end
$var wire 1 l carry1 $end
$scope module ha1 $end
$var wire 1 e a $end
$var wire 1 f b $end
$var wire 1 l carry $end
$var wire 1 i sum $end
$upscope $end
$scope module ha2 $end
$var wire 1 i a $end
$var wire 1 g b $end
$var wire 1 k carry $end
$var wire 1 j sum $end
$upscope $end
$upscope $end
$upscope $end
$scope begin full_adder_loop[7] $end
$var parameter 4 m i $end
$scope module fa $end
$var wire 1 n a $end
$var wire 1 o b $end
$var wire 1 p cin $end
$var wire 1 q cout $end
$var wire 1 r sum1 $end
$var wire 1 s sum $end
$var wire 1 t carry2 $end
$var wire 1 u carry1 $end
$scope module ha1 $end
$var wire 1 n a $end
$var wire 1 o b $end
$var wire 1 u carry $end
$var wire 1 r sum $end
$upscope $end
$scope module ha2 $end
$var wire 1 r a $end
$var wire 1 p b $end
$var wire 1 t carry $end
$var wire 1 s sum $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$enddefinitions $end
$comment Show the parameter values. $end
$dumpall
b111 m
b110 d
b101 [
b100 R
b11 I
b10 @
b1 7
b0 .
$end
#0
$dumpvars
0u
0t
0s
0r
0q
0p
0o
0n
0l
0k
0j
0i
0h
0g
0f
0e
0c
0b
0a
0`
0_
0^
0]
0\
0Z
0Y
0X
0W
0V
0U
0T
0S
0Q
0P
0O
0N
0M
0L
0K
0J
0H
0G
0F
0E
0D
0C
0B
0A
0?
0>
0=
0<
0;
0:
09
08
06
05
04
03
02
01
00
0/
b0 -
b0 ,
b0 +
b0 *
0)
b0 (
b0 '
b0 &
b0 %
0$
0#
b0 "
b0 !
$end
#10
b1111 !
b1111 "
b1111 ,
1=
1O
14
1F
1<
1N
13
1E
19
1K
1/
1A
b1010 (
b101 &
b1010 '
b1010 +
b101 %
b101 *
#20
1X
1U
1M
0O
1P
1L
1D
0F
1G
1C
1;
0=
1>
1:
b10000 !
b10000 "
b10000 ,
12
04
15
11
b11111 -
1)
#30
0U
0#
0M
1O
0P
0L
0s
0p
0D
1F
0G
0h
0C
0k
0g
0;
1=
0>
0_
0:
0b
0^
02
b1111111 !
b1111111 "
b1111111 ,
14
05
0V
01
1j
1X
0Y
1a
b0 -
1i
1W
1`
09
0K
1f
18
1J
1S
1\
b1000000 (
b111111 &
0)
b1000000 '
b1000000 +
b111111 %
b111111 *
#40
1#
1s
1p
1h
0j
1k
1g
1_
0a
1b
1^
1V
0X
1Y
1U
1M
0O
1P
1L
1D
0F
1G
1C
1;
0=
1>
1:
b10000000 !
b10000000 "
b10000000 ,
b11111110 -
04
12
03
16
10
0f
1e
b1 (
b1111111 &
b1 '
b1 +
b1111111 %
b1111111 *
#50
0s
0p
0g
0^
0U
1$
0L
0C
0:
b0 !
b0 "
b0 ,
b100000000 -
0;
0D
0M
0V
0_
0h
02
0=
0>
0F
0G
0O
0P
0X
0Y
0a
0b
0j
0k
1q
1#
06
0<
0E
0N
0W
0`
0i
1u
00
1o
0/
08
0A
0J
0S
0\
0e
1n
b10000000 (
b10000000 &
b10000000 '
b10000000 +
b10000000 %
b10000000 *
#60
1t
1p
1h
1k
1g
1_
1b
1^
1V
1Y
1U
1M
1P
1L
1D
1G
1C
1;
1>
1$
1:
b111111110 -
b0 !
b0 "
b0 ,
0s
1q
0#
12
0=
0F
0O
0X
0a
0j
1r
0u
16
1<
1E
1N
1W
1`
1i
10
0o
1/
18
1A
1J
1S
1\
1e
b1 (
b11111111 &
b1 '
b1 +
b11111111 %
b11111111 *
#70
0:
b111111100 -
b1 !
b1 "
b1 ,
14
02
0=
0>
13
06
0<
1?
00
19
b10 (
b10 '
b10 +
#80
0C
b111111000 -
b11111011 !
b11111011 "
b11111011 ,
1=
0;
0F
0G
1O
0P
1X
0Y
1a
0b
1j
0k
1s
0t
0#
1<
0?
0E
1H
0N
1Q
0W
1Z
0`
1c
0i
1l
0r
1u
10
09
1B
1K
1T
1]
1f
1o
0/
b11111101 (
b11111110 &
b11111101 '
b11111101 +
b11111110 %
b11111110 *
#90
1G
1C
1;
0=
1>
1$
1p
1g
1^
1U
1L
1:
b0 !
b0 "
b0 ,
b111111110 -
0F
1D
0O
1P
1M
0X
1Y
1V
0a
1b
1_
0j
1k
1h
0s
1t
1q
04
12
1E
0H
1N
0Q
1W
0Z
1`
0c
1i
0l
1r
0u
03
16
0B
0K
0T
0]
0f
0o
1/
b1 (
b11111111 &
b1 '
b1 +
b11111111 %
b11111111 *
#100
b11111110 !
b11111110 "
b11111110 ,
1=
0>
1F
0G
1O
0P
1X
0Y
1a
0b
1j
0k
1s
0t
0#
0<
1?
0E
1H
0N
1Q
0W
1Z
0`
1c
0i
1l
0r
1u
19
1B
1K
1T
1]
1f
1o
b11111111 (
b11111111 '
b11111111 +
#110
